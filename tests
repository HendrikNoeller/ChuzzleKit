#!/usr/bin/ruby
OBJC = <<-__EOBJC__

@import XCTest;
#import "Chuzzle.h"

int main() {
    @autoreleasepool {
        XCTSelfTestMain();
    }
}

@interface ChuzzleKitTests : XCTestCase
@end

@implementation ChuzzleKitTests

- (void)test_everything {
    id b = @[@{@"a": @"", @2: @"", @3: @[], @4: [NSNull null]}];
    id a = @[NSNull.null, @"\t", @{@1: @"   ", @2: b}, @1].chuzzle;
    XCTAssertEqualObjects(a, @[@1]);
}

- (void)test_no_chuzzle {
    NSDictionary *a =  @{@1: @"1", @2: @"2"};
    id b = a.chuzzle;
    XCTAssertEqualObjects(a, b);
}

- (void)test_another_test {
    NSDictionary *d = @{@1: @"", @2: @"  2  "}.chuzzle;
    XCTAssertEqualObjects(d, @{@2: @"2"});
}
- (void)test_nsobject {
    id o = [NSObject new];
    XCTAssertEqual(o, [o chuzzle]);
}

@end



__EOBJC__

OUT = File.basename(Dir.pwd) + 'Tests'
FRAMEWORKS = "/Applications/Xcode.app/Contents/Developer/Library/Frameworks"

def bold(s); s; end
def red(s); "\e[31m#{s}\e[0m"; end
def green(s); "\e[32m#{s}\e[0m"; end
def tab(n, s); s.gsub(/^/, " " * n); end
def log(message); $stdout.puts(message); end

def each_test_line
  require "stringio"
  require "open3"

  Open3.popen3("/tmp/#{OUT}") do |stdin, stdout, stderr, wait_thr|
    while line = stderr.gets
      yield line, stderr
    end
  end
end

def test!
  test_method = nil
  each_test_line do |line, stderr|
    case line
    when /Test Suite '(.*)' started/
      log bold($1) unless $1 == 'tmp'
    when /Test Suite '.*' finished/
    when /\[(\w+) (\w+)\]' started.$/
      test_method = $2
    when /\s(passed|failed)\s\((.*)\)/
      result = if $1 == "passed"
        green("PASS") 
      else
        red("FAIL")
      end
      result = tab(2, result)
      time = $2.gsub(/\sseconds/, "s")
      log "#{result} #{test_method} (#{time})"
    when /^(Executed(.?)+)$/
      if stderr.eof?
        summary = $1
        if /(\d) failures?/.match(summary)[1] == "0"
          summary.gsub!(/(\d failures?)/, green('\1'))
        else
          summary.gsub!(/(\d failures?)/, red('\1'))
        end
        log summary
      end
    else
      log line.strip
    end
  end
end

def compile!
  File.open("/tmp/#{OUT}.m", 'w') do |f|
    f.puts("\n\n")  # make line numbers match compile errors
    f.puts(OBJC)
  end
  abort unless system <<-EOS
    clang -g -O0 -ObjC -F#{FRAMEWORKS} -I. -fmodules -fobjc-arc \
          /tmp/#{OUT}.m Chuzzle.m \
          -w -o /tmp/#{OUT}
  EOS
  abort unless system <<-EOS
      install_name_tool -change \
          @rpath/XCTest.framework/Versions/A/XCTest \
          #{FRAMEWORKS}/XCTest.framework/XCTest \
          /tmp/#{OUT}
  EOS
end

compile!
test!

File.delete("/tmp/#{OUT}.m")
File.delete("/tmp/#{OUT}")
